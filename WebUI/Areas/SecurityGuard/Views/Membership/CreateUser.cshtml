@model WebUI.Areas.SecurityGuard.ViewModels.RegisterViewModel

@{
    ViewBag.Title = "User Management";
    //Layout = "~/Areas/SecurityGuard/Views/Shared/_SecurityGuardLayoutPage.cshtml";
}
<div class="row wrapper border-bottom white-bg page-heading">
    <div class="col-lg-10">
        <h2>@ViewBag.Title</h2>
        <div id="breadcrumb">
            @Html.ActionLink("Dashboard", "Index", "Dashboard") >
            @Html.ActionLink("Manage Users", "Index", "Membership") >
            Create User
        </div>  
    </div>
</div>

<div class="wrapper wrapper-content">
    <div class="ibox">
        <div class="ibox-title">            
            <h3>Create User</h3>            
        </div>
        <div class="ibox-content">
            @using (Html.BeginForm(ViewContext.RouteData.GetRequiredString("action"), ViewContext.RouteData.GetRequiredString("controller"), FormMethod.Post, new { @class = "form-horizontal" }))
            {
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })

                <div class="form-group">
                    @Html.LabelFor(model => model.UserName, new { @class = "col-xs-2 control-label" })
                    <div class="col-xs-4">
                        @Html.TextBoxFor(model => model.UserName, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.UserName, "", new { id = "username-message", @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Email, new { @class = "col-xs-2 control-label" })
                    <div class="col-xs-4">
                        @Html.TextBoxFor(model => model.Email, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Password, new { @class = "col-xs-2 control-label required" })
                    <div class="col-xs-4">
                        @Html.PasswordFor(model => model.Password, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.Password, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.ConfirmPassword, new { @class = "col-xs-2 control-label required" })
                    <div class="col-xs-4">
                        @Html.PasswordFor(model => model.ConfirmPassword, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.ConfirmPassword, "", new { @class = "text-danger" })
                    </div>
                </div>

                if (Model.RequireSecretQuestionAndAnswer)
                {
                    <div class="form-group">
                        @Html.LabelFor(model => model.SecretQuestion, new { @class = "col-xs-2 control-label" })
                        <div class="col-xs-4">
                            @Html.TextBoxFor(model => model.SecretQuestion, new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.SecretQuestion, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.SecretAnswer, new { @class = "col-xs-2 control-label" })
                        <div class="col-xs-4">
                            @Html.TextBoxFor(model => model.SecretAnswer, new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.SecretAnswer, "", new { @class = "text-danger" })
                        </div>
                    </div>
                }

                <div class="form-group">
                    @Html.LabelFor(model => model.Approve, new { @class = "col-xs-2 control-label" })
                    <div class="col-xs-4">
                        <div class="checkbox">
                            <label>
                                @Html.EditorFor(model => model.Approve)
                            </label>
                        </div>
                        @Html.ValidationMessageFor(model => model.Approve, "", new { @class = "text-danger" })
                    </div>
                </div>


                @Html.HiddenFor(model => model.RequireSecretQuestionAndAnswer)
                <div class="form-group">
                    <div class="col-xs-offset-2 col-xs-10">
                        <input type="submit" class="btn btn-primary" value="Create">
                        @Html.ActionLink("Back to Manage Users", "Index", "Membership", null, new { @class = "btn btn-link" })
                    </div>
                </div>
            }
        </div>
    </div>
</div>

<script src="@Url.Content("~/Scripts/jquery.validate.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.min.js")" type="text/javascript"></script>
<script type="text/javascript">

    $(function () {

        var msg = $("#username-message");
        var btn = $("input[type='submit']");

        $("#UserName").focus();

        $("#UserName").blur(function () {

            var username = $(this).val();

            if (username.length == 0) {
                alert("No username.");
                return;
            }

            $.ajax({
                url: '@Url.Action("CheckForUniqueUser", "Membership")',
                dataType: 'json',
                type: 'GET',
                data: { userName: username },
                success: OnCheckForUniqueUserSuccess,
                error: OnCheckForUniqueUserError
            });
        });

        function OnCheckForUniqueUserSuccess(data) {
            if (data.Exists) {
                msg.text("This username already exists.  Please enter a new one.");
                btn.attr("disabled", "disabled");
            } else {
                msg.text("");
                btn.removeAttr("disabled");
            }
        }

        function OnCheckForUniqueUserError(xhr, status, error) {
            msg.text("There was an error checking uniqueness.");
        }
    });

</script>